// work1.cpp : 定义控制台应用程序的入口点。
//

#include "stdafx.h"
#include <iostream>
#include <fstream>

#include <string.h>   
#include <math.h>     
#include <stdio.h>     
#include <stdlib.h>     
#include <malloc.h>  
using namespace std;

#define   WIDTHBYTES(bits) (((bits)+31)/32*4)//用于使图像宽度所占字节数为4byte的倍数  

#define pi 3.1415926535


typedef unsigned char  BYTE;
typedef unsigned short WORD;
typedef unsigned long  DWORD;
typedef long LONG;

//位图文件头信息结构定义  
//其中不包含文件类型信息（由于结构体的内存结构决定，要是加了的话将不能正确读取文件信息）  

typedef struct tagBITMAPFILEHEADER {
	DWORD  bfSize;          //文件大小  
	WORD   bfReserved1;     //保留字，不考虑  
	WORD   bfReserved2;     //保留字，同上  
	DWORD  bfOffBits;       //实际位图数据的偏移字节数，即前三个部分长度之和  
} BITMAPFILEHEADER;

//信息头BITMAPINFOHEADER，也是一个结构，其定义如下：  

typedef struct tagBITMAPINFOHEADER {
	//public:  
	DWORD   biSize;             //指定此结构体的长度，为40  
	LONG    biWidth;            //位图宽  
	LONG    biHeight;           //位图高  
	WORD    biPlanes;           //平面数，为1  
	WORD    biBitCount;         //采用颜色位数，可以是1，2，4，8，16，24，新的可以是32  
	DWORD   biCompression;      //压缩方式，可以是0，1，2，其中0表示不压缩  
	DWORD   biSizeImage;        //实际位图数据占用的字节数  
	LONG    biXPelsPerMeter;    //X方向分辨率  
	LONG    biYPelsPerMeter;    //Y方向分辨率  
	DWORD   biClrUsed;          //使用的颜色数，如果为0，则表示默认值(2^颜色位数)  
	DWORD   biClrImportant;     //重要颜色数，如果为0，则表示所有颜色都是重要的  
} BITMAPINFOHEADER;

typedef struct tagRGBQUAD {
	BYTE rgbBlue;
	BYTE rgbGreen;
	BYTE rgbRed;
	BYTE rgbReserved;
}RGBQUAD;

void rotate90() {//旋转90度

}

void exchange13() {//分割后交换一三部分

}

void sobel() {
	BITMAPFILEHEADER bitHead;
	BITMAPINFOHEADER bitInfoHead;
	char strFile[50] = "C:\\Users\\yqy\\Desktop\\2.bmp";//打开图像路径
	char strFilesave[50] = "C:\\Users\\yqy\\Desktop\\sobel.bmp";//处理后图像存储路径

	FILE* pfile = fopen(strFile, "rb");//文件打开图像
	FILE* wfile = fopen(strFilesave, "wb");//打开文件为存储修改后图像做准备

									 //读取位图文件头信息
	WORD fileType;
	fread(&fileType, 1, sizeof(WORD), pfile);
	fwrite(&fileType, 1, sizeof(WORD), wfile);
	if (fileType != 0x4d42)
	{
		printf("file is not .bmp file!");
		return ;
	}
	fread(&bitHead, 1, sizeof(tagBITMAPFILEHEADER), pfile);
	fwrite(&bitHead, 1, sizeof(tagBITMAPFILEHEADER), wfile);//写回位图文件头信息到输出文件  

															//读取位图信息头信息
	fread(&bitInfoHead, 1, sizeof(BITMAPINFOHEADER), pfile);
	fwrite(&bitInfoHead, 1, sizeof(BITMAPINFOHEADER), wfile);//写回位图信息头信息到输出文件  

	int width = bitInfoHead.biWidth;
	int height = bitInfoHead.biHeight;
	//分配内存空间把源图存入内存   
	int l_width = WIDTHBYTES(width* bitInfoHead.biBitCount);//计算位图的实际宽度并确保它为4byte的倍数 

	BYTE    *pColorData = (BYTE *)malloc(height*l_width);//开辟内存空间存储图像数据
	memset(pColorData, 0, height*l_width);

	BYTE    *pColorDataMid = (BYTE *)malloc(height*l_width);//开辟内存空间存储图像处理之后数据
	memset(pColorDataMid, 0, height*l_width);

	long nData = height*l_width;

	//灰度图要读调色板
	RGBQUAD* pColorTable = new RGBQUAD[256];
	fread(pColorTable, sizeof(RGBQUAD), 256, pfile);
	fwrite(pColorTable, sizeof(RGBQUAD), 256, wfile);
	//把位图数据信息读到数组里   
	fread(pColorData, 1, nData, pfile);

	static int sobelMaskHor[9] = {-1,-2,-1,0,0,0,1,2,1};
	static int sobelMAskVer[9] = { -1,0,1,-2,0,2,-1,0,1 };

	int ts = 0, tv = 0, tmp = 0, dst = 0, idx = 0;
	for (int row = 1; row < height - 1; row++) {
		for (int col = 1; col < width - 1; col++) {
			idx = ts = tv = 0;
			for (int r = row - 1; r <= row + 1; r++) {
				for (int c = col - 1; c <= col + 1; c++) {
					tmp = pColorData[r*l_width+c];
					ts += (sobelMaskHor[idx] * tmp);
					tv += (sobelMAskVer[idx] * tmp);
					idx++;
				}
			}
			dst = sqrt((double)(ts*ts+tv*tv));
			//dst = abs(ts) + abs(tv) + 0.5;
			if (dst > 100) {
				pColorDataMid[row*l_width + col ] = 255;
			}
			else {
				pColorDataMid[row*l_width + col ] = 0;
			}
		}
	}

	//填补四周
	for (int i = 0; i < l_width; i++) {
		pColorDataMid[i] = 0;
		pColorDataMid[height*l_width - l_width + i] = 0;
	}
	for (int i = 0; i < height; i++) {
		pColorDataMid[l_width*i] = 0;
		pColorDataMid[l_width - 1 + l_width*i] = 0;
	}

	fwrite(pColorDataMid, 1, nData, wfile);//将处理完图像数据写回文件
}

void gaussian() {
	BITMAPFILEHEADER bitHead;
	BITMAPINFOHEADER bitInfoHead;
	char strFile[50] = "C:\\Users\\yqy\\Desktop\\2.bmp";//打开图像路径
	char strFilesave[50] = "C:\\Users\\yqy\\Desktop\\gaussian.bmp";//处理后图像存储路径

	FILE* pfile = fopen(strFile, "rb");//文件打开图像
	FILE* wfile = fopen(strFilesave, "wb");//打开文件为存储修改后图像做准备

										   //读取位图文件头信息
	WORD fileType;
	fread(&fileType, 1, sizeof(WORD), pfile);
	fwrite(&fileType, 1, sizeof(WORD), wfile);
	if (fileType != 0x4d42)
	{
		printf("file is not .bmp file!");
		return;
	}
	fread(&bitHead, 1, sizeof(tagBITMAPFILEHEADER), pfile);
	fwrite(&bitHead, 1, sizeof(tagBITMAPFILEHEADER), wfile);//写回位图文件头信息到输出文件  

															//读取位图信息头信息
	fread(&bitInfoHead, 1, sizeof(BITMAPINFOHEADER), pfile);
	fwrite(&bitInfoHead, 1, sizeof(BITMAPINFOHEADER), wfile);//写回位图信息头信息到输出文件  

	int width = bitInfoHead.biWidth;
	int height = bitInfoHead.biHeight;
	//分配内存空间把源图存入内存   
	int l_width = WIDTHBYTES(width* bitInfoHead.biBitCount);//计算位图的实际宽度并确保它为4byte的倍数 

	BYTE    *pColorData = (BYTE *)malloc(height*l_width);//开辟内存空间存储图像数据
	memset(pColorData, 0, height*l_width);

	BYTE    *pColorDataMid = (BYTE *)malloc(height*l_width);//开辟内存空间存储图像处理之后数据
	memset(pColorDataMid, 0, height*l_width);

	long nData = height*l_width;

	//灰度图要读调色板
	RGBQUAD* pColorTable = new RGBQUAD[256];
	fread(pColorTable, sizeof(RGBQUAD), 256, pfile);
	fwrite(pColorTable, sizeof(RGBQUAD), 256, wfile);
	//把位图数据信息读到数组里   
	fread(pColorData, 1, nData, pfile);

	int templates[25] = {
		1,4,7,4,1,
		4,16,26,16,4,
		7,26,41,26,7,
		4,16,26,16,4,
		1,4,7,4,1
	};

	for (int j = 2; j < height - 2; j++) {
		for (int i = 2; i < width - 2; i++) {
			int sum = 0;
			int index = 0;
			for (int m = j - 2; m < j + 3; m++) {
				for (int n = i - 2; n < i + 3; n++) {
					sum += pColorData[m*l_width + n] * templates[index++];
				}
			}
			sum /= 273;
			if (sum > 255)
				sum = 255;
			pColorDataMid[j*l_width + i] = sum;
		}
	}
	fwrite(pColorDataMid, 1, nData, wfile);//将处理完图像数据写回文件
}

void erzhi() {//二值化
	BITMAPFILEHEADER bitHead;
	BITMAPINFOHEADER bitInfoHead;
	char strFile[50] = "C:\\Users\\yqy\\Desktop\\2.bmp";//打开图像路径
	char strFilesave[50] = "C:\\Users\\yqy\\Desktop\\erzhi.bmp";//处理后图像存储路径

	FILE* pfile = fopen(strFile, "rb");//文件打开图像
	FILE* wfile = fopen(strFilesave, "wb");//打开文件为存储修改后图像做准备

										   //读取位图文件头信息
	WORD fileType;
	fread(&fileType, 1, sizeof(WORD), pfile);
	fwrite(&fileType, 1, sizeof(WORD), wfile);
	if (fileType != 0x4d42)
	{
		printf("file is not .bmp file!");
		return;
	}
	fread(&bitHead, 1, sizeof(tagBITMAPFILEHEADER), pfile);
	fwrite(&bitHead, 1, sizeof(tagBITMAPFILEHEADER), wfile);//写回位图文件头信息到输出文件  

															//读取位图信息头信息
	fread(&bitInfoHead, 1, sizeof(BITMAPINFOHEADER), pfile);
	fwrite(&bitInfoHead, 1, sizeof(BITMAPINFOHEADER), wfile);//写回位图信息头信息到输出文件  

	int width = bitInfoHead.biWidth;
	int height = bitInfoHead.biHeight;
	//分配内存空间把源图存入内存   
	int l_width = WIDTHBYTES(width* bitInfoHead.biBitCount);//计算位图的实际宽度并确保它为4byte的倍数 

	BYTE    *pColorData = (BYTE *)malloc(height*l_width);//开辟内存空间存储图像数据
	memset(pColorData, 0, height*l_width);

	BYTE    *pColorDataMid = (BYTE *)malloc(height*l_width);//开辟内存空间存储图像处理之后数据
	memset(pColorDataMid, 0, height*l_width);

	long nData = height*l_width;

	//灰度图要读调色板
	RGBQUAD* pColorTable = new RGBQUAD[256];
	fread(pColorTable, sizeof(RGBQUAD), 256, pfile);
	fwrite(pColorTable, sizeof(RGBQUAD), 256, wfile);
	//把位图数据信息读到数组里   
	fread(pColorData, 1, nData, pfile);

	int threshhold = 30;
	for (int i = 0; i < height; i++) {
		for (int j = 0; j < width; j++) {
			if (pColorData[i*l_width + j] > threshhold)
				pColorDataMid[i*l_width + j] = 255;
			else
				pColorDataMid[i*l_width + j] = 0;
		}
	}
	fwrite(pColorDataMid, 1, nData, wfile);//将处理完图像数据写回文件
}

void toGray() {//转灰度图

	BITMAPFILEHEADER bitHead,writeBitHead;
	BITMAPINFOHEADER bitInfoHead,writebitInfoHead;
	FILE* pfile;
	FILE* wfile;

	char strFile[50] = "C:\\Users\\yqy\\Desktop\\lena512.bmp";//打开图像路径
	char strFilesave[50] = "C:\\Users\\yqy\\Desktop\\2.bmp";//处理后图像存储路径

	pfile = fopen(strFile, "rb");//文件打开图像
	wfile = fopen(strFilesave, "wb");//打开文件为存储修改后图像做准备

									 //读取位图文件头信息
	WORD fileType;
	fread(&fileType, 1, sizeof(WORD), pfile);
	fwrite(&fileType, 1, sizeof(WORD), wfile);
	if (fileType != 0x4d42)
	{
		printf("file is not .bmp file!");
		return ;
	}
	fread(&bitHead, 1, sizeof(tagBITMAPFILEHEADER), pfile);
	writeBitHead = bitHead;
	fwrite(&writeBitHead, 1, sizeof(tagBITMAPFILEHEADER), wfile);//写回位图文件头信息到输出文件  

															//读取位图信息头信息
	fread(&bitInfoHead, 1, sizeof(BITMAPINFOHEADER), pfile);
	writebitInfoHead = bitInfoHead;
	writebitInfoHead.biBitCount = 8;
	fwrite(&writebitInfoHead, 1, sizeof(BITMAPINFOHEADER), wfile);//写回位图信息头信息到输出文件  

	unsigned char*src;
	unsigned char*dst;

	src = new unsigned char[bitInfoHead.biHeight*bitInfoHead.biWidth * 3];
	fread(src,1, sizeof(unsigned char)*bitInfoHead.biHeight*bitInfoHead.biWidth * 3,pfile);

	dst = new unsigned char[bitInfoHead.biHeight*bitInfoHead.biWidth * 3];

	int temp = 0;
	int j = 0;
	for (int i = 0; i < bitInfoHead.biHeight*bitInfoHead.biWidth * 3; i += 3) {
		temp = (src[i] + src[i + 1] + src[i + 2]) / 3;//灰度计算
		dst[j++] = (unsigned char)temp;
		//dst[j++] = (unsigned char)temp;
		//dst[j++] = (unsigned char)temp;
	}
	//灰度图需要调色板
	unsigned char k = 0;
	unsigned char z = 0;
	for (int i = 0; i < 1024; i += 4) {
		fwrite((char*)&k, 1, sizeof(unsigned char), wfile);
		fwrite((char*)&k, 1, sizeof(unsigned char), wfile);
		fwrite((char*)&k, 1, sizeof(unsigned char), wfile);

		fwrite((char*)&z, 1, sizeof(unsigned char), wfile);
		k++;
	}

	fwrite(dst, 1,sizeof(unsigned char)*bitInfoHead.biHeight*bitInfoHead.biWidth * 3,wfile);
}

int main()
{

	BITMAPFILEHEADER bitHead;
	BITMAPINFOHEADER bitInfoHead;
	FILE* pfile;
	FILE* wfile;

	char strFile[50] = "C:\\Users\\yqy\\Desktop\\lena512.bmp";//打开图像路径
	char strFilesave[50] = "C:\\Users\\yqy\\Desktop\\1.bmp";//处理后图像存储路径

	pfile = fopen(strFile, "rb");//文件打开图像
	wfile = fopen(strFilesave, "wb");//打开文件为存储修改后图像做准备

									 //读取位图文件头信息
	WORD fileType;
	fread(&fileType, 1, sizeof(WORD), pfile);
	fwrite(&fileType, 1, sizeof(WORD), wfile);
	if (fileType != 0x4d42)
	{
		printf("file is not .bmp file!");
		return 0;
	}
	fread(&bitHead, 1, sizeof(tagBITMAPFILEHEADER), pfile);
	fwrite(&bitHead, 1, sizeof(tagBITMAPFILEHEADER), wfile);//写回位图文件头信息到输出文件  

															//读取位图信息头信息
	fread(&bitInfoHead, 1, sizeof(BITMAPINFOHEADER), pfile);
	fwrite(&bitInfoHead, 1, sizeof(BITMAPINFOHEADER), wfile);//写回位图信息头信息到输出文件  

	int width = bitInfoHead.biWidth;
	int height = bitInfoHead.biHeight;
	//分配内存空间把源图存入内存   
	int l_width = WIDTHBYTES(width* bitInfoHead.biBitCount);//计算位图的实际宽度并确保它为4byte的倍数 

	BYTE    *pColorData = (BYTE *)malloc(height*l_width);//开辟内存空间存储图像数据
	memset(pColorData, 0, height*l_width);

	BYTE    *pColorDataMid = (BYTE *)malloc(height*l_width);//开辟内存空间存储图像处理之后数据
	memset(pColorDataMid, 0, height*l_width);

	long nData = height*l_width;

	//把位图数据信息读到数组里   
	fread(pColorData, 1, nData, pfile);

	for (int hnum = 0; hnum<height; hnum++)
		for (int wnum = 0; wnum<width; wnum++)
		{
			int pixel_point = hnum*l_width + wnum * 3;//数组位置偏移量，对应于图像的各像素点RGB的起点  
			pColorDataMid[pixel_point] = pColorData[pixel_point] ;
			pColorDataMid[pixel_point + 1] = pColorData[pixel_point + 1] ;
			pColorDataMid[pixel_point + 2] = pColorData[pixel_point + 2] ;
		}


	fwrite(pColorDataMid, 1, nData, wfile);//将处理完图像数据写回文件

	fclose(pfile);
	fclose(wfile);
	toGray();
	rotate90();
	sobel();
	gaussian();
	erzhi();
}
